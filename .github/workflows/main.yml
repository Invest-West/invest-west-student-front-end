name: ChatGPT Auto Fix React Issue

on:
  workflow_dispatch:
    inputs:
      issue_description:
        description: "We want to make our projects viewable to visitors who are not logged in can you help with this is the page called groupViewOffer & nonGroupViewOffer"
        required: true
        type: string

jobs:
  fix_issue:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the front-end repository
      - name: Checkout front-end repository
        uses: actions/checkout@v3

      # Step 2: Checkout the back-end repository into 'backend' directory
      - name: Checkout back-end repository
        uses: actions/checkout@v3
        with:
          repository: Invest-West/invest-west-student-back-end
          path: backend

      # Step 3: Create or switch to the predefined branch
      - name: Create or switch to the predefined branch
        id: create_branch
        run: |
          branch_name="ai-fixes"
          git fetch origin $branch_name || true
          if git rev-parse --verify origin/$branch_name; then
            echo "Branch $branch_name exists. Checking it out."
            git checkout $branch_name
          else
            echo "Branch $branch_name does not exist. Creating from development."
            git checkout development
            git checkout -b $branch_name
          fi
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      # Step 4: Identify relevant files in both repositories
      - name: Identify relevant files
        id: find_files
        run: |
          # Find files in the front-end 'src' directory
          find ./src -type f \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) -print0 > frontend_files.txt
          # Find files in the back-end directory
          find ./backend -type f \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) -print0 > backend_files.txt
          # Combine file lists
          cat frontend_files.txt backend_files.txt > all_files.txt
          # Output file paths
          echo "file_list=all_files.txt" >> $GITHUB_OUTPUT

      # Step 5: Call ChatGPT to suggest fixes
      - name: Call ChatGPT to suggest fixes
        id: chatgpt_response
        run: |
          issue_description="${{ github.event.inputs.issue_description }}"
          file_list="${{ steps.find_files.outputs.file_list }}"
          while IFS= read -r -d '' file; do
            echo "Processing $file"
            file_content=$(cat "$file")
            # Prepare the prompt
            prompt="Here is the issue: $issue_description. Please provide a fix for the following file:\n\n$file_content"
            # Call ChatGPT API
            response=$(curl -s https://api.openai.com/v1/completions \
              -H "Authorization: Bearer ${{ secrets.OPENAI }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"model\": \"gpt-4\",
                \"prompt\": \"$prompt\",
                \"max_tokens\": 1500,
                \"temperature\": 0
              }")
            # Extract ChatGPT's suggestion
            fix_code=$(echo "$response" | jq -r '.choices[0].text')
            # Apply the fix to the file
            if [[ -n "$fix_code" && "$fix_code" != "null" ]]; then
              echo "Applying ChatGPT fix to $file"
              echo "$fix_code" > "$file"
            else
              echo "No fix provided for $file"
            fi
          done < "${file_list}"

      # Step 6: Set git user information
      - name: Set git user information
        run: |
          git config --local user.email "jserpis@hotmail.co.uk"
          git config --local user.name "Styrle"

      # Step 7: Show modified files
      - name: Show modified files
        run: |
          echo "Modified files:"
          git status --short

      # Step 8: Commit the changes
      - name: Commit the changes
        run: |
          git add .
          git commit -m "ChatGPT auto fix for issue: ${{ github.event.inputs.issue_description }}" || echo "No changes to commit"

      # Step 9: Push the changes
      - name: Push the changes
        run: |
          git push origin "${{ steps.create_branch.outputs.branch_name }}"
