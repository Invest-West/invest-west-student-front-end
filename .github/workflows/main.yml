name: ChatGPT Auto Fix React Issue

on:
  workflow_dispatch:
    inputs:
      issue_description:
        description: "We want to make our projects viewable to visitors who are not logged in can you help with this is the page call groupViewOffer & nonGroupViewOffer"
        required: true
        type: string

jobs:
  fix_issue:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout front-end repository
      - name: Checkout front-end repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Checkout back-end repository into 'backend' directory
      - name: Checkout back-end repository
        uses: actions/checkout@v3
        with:
          repository: Invest-West/invest-west-student-back-end
          path: backend
          token: ${{ secrets.PAT_TOKEN }}
          persist-credentials: false

      # Step 3: Create or switch to the predefined branch
      - name: Create or switch to the predefined branch
        id: create_branch
        run: |
          branch_name="ai-fixes"
          git fetch origin $branch_name || true
          if git rev-parse --verify origin/$branch_name; then
            echo "Branch $branch_name exists. Checking it out."
            git checkout $branch_name
          else
            echo "Branch $branch_name does not exist. Creating from development."
            git checkout development
            git checkout -b $branch_name
          fi
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      # Step 4: Identify all code files
      - name: Identify all code files
        id: find_files
        run: |
          # Find files in the front-end 'src' directory
          find ./src -type f \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) > frontend_files.txt
          # Find files in the back-end directory
          find ./backend -type f \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) > backend_files.txt
          # Combine file lists
          cat frontend_files.txt backend_files.txt > all_files.txt
          # Output file paths
          echo "file_list=all_files.txt" >> $GITHUB_OUTPUT

      # Step 5: Use OpenAI to identify relevant files
      - name: Identify relevant files with OpenAI
        id: identify_relevant_files
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI }}
        run: |
          issue_description="${{ github.event.inputs.issue_description }}"
          file_list="all_files.txt"
          # Read all file paths into an array
          mapfile -t files < "$file_list"
          # Prepare the prompt
          file_paths=$(printf "%s\n" "${files[@]}")
          user_message="Based on the following issue description, please list the file paths that need to be modified to fix the issue. Provide the list in a JSON array format.\n\nIssue Description:\n$issue_description\n\nAvailable File Paths:\n$file_paths"
          # Build JSON payload using jq
          json_payload=$(jq -n \
            --arg model "gpt-4" \
            --arg content "$user_message" \
            --argjson max_completion_tokens 20000 \
            '{model: $model, messages: [{role: "user", content: $content}], max_completion_tokens: $max_completion_tokens}')
          # Call OpenAI API
          response=$(echo "$json_payload" | curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @-)
          # Check for errors in the response
          if echo "$response" | jq -e '.error' >/dev/null; then
            error_message=$(echo "$response" | jq -r '.error.message')
            echo "Error from OpenAI API: $error_message"
            exit 1
          fi
          # Extract the list of relevant files
          relevant_files=$(echo "$response" | jq -r '.choices[0].message.content' | jq '.')
          # Save the list to a file
          echo "$relevant_files" > relevant_files.json
          echo "Relevant files identified:"
          echo "$relevant_files"
          # Output the list of relevant files
          echo "relevant_files=$PWD/relevant_files.json" >> $GITHUB_OUTPUT

      # Step 6: Call OpenAI to suggest fixes for relevant files
      - name: Call OpenAI to suggest fixes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI }}
        run: |
          issue_description="${{ github.event.inputs.issue_description }}"
          relevant_files="${{ steps.identify_relevant_files.outputs.relevant_files }}"
          files=$(jq -r '.[]' "$relevant_files")
          for file in $files; do
            if [[ -f "$file" ]]; then
              echo "Processing $file"
              file_content=$(cat "$file")
              # Prepare the user message
              user_message="Here is the issue: $issue_description. Please provide a fix for the following file:\n\n$file_content"
              # Build JSON payload using jq
              json_payload=$(jq -n \
                --arg model "gpt-4" \
                --arg content "$user_message" \
                --argjson max_completion_tokens 20000 \
                '{model: $model, messages: [{role: "user", content: $content}], max_completion_tokens: $max_completion_tokens}')
              # Call OpenAI API
              response=$(echo "$json_payload" | curl -s https://api.openai.com/v1/chat/completions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -d @-)
              # Check for errors in the response
              if echo "$response" | jq -e '.error' >/dev/null; then
                error_message=$(echo "$response" | jq -r '.error.message')
                echo "Error from OpenAI API: $error_message"
                exit 1
              fi
              # Extract the suggestion
              fix_code=$(echo "$response" | jq -r '.choices[0].message.content')
              # Apply the fix to the file
              if [[ -n "$fix_code" && "$fix_code" != "null" ]]; then
                echo "Applying fix to $file"
                echo "$fix_code" > "$file"
              else
                echo "No fix provided for $file"
              fi
            else
              echo "File $file does not exist"
            fi
          done

      # Step 7: Set git user information
      - name: Set git user information
        run: |
          git config --local user.email "jserpis@hotmail.co.uk"
          git config --local user.name "Styrle"

      # Step 8: Show modified files
      - name: Show modified files
        run: |
          echo "Modified files:"
          git status --short

      # Step 9: Commit the changes
      - name: Commit the changes
        run: |
          git add .
          git commit -m "Auto fix for issue: ${{ github.event.inputs.issue_description }}" || echo "No changes to commit"

      # Step 10: Push the changes
      - name: Push the changes
        run: |
          git push origin "${{ steps.create_branch.outputs.branch_name }}"
